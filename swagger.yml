swagger: "2.0"
info:
  description: "Trustbrix - real estate for everyone"
  version: "1.0.0"
  title: "Trustbrix"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "developers@trustbrix.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:4500"
tags:
- name: "Users"
  description: "Operations about user"
  externalDocs:
    description: "Find out more"
    url: "http://editor.swagger.io/"
- name: "Payment"
  description: "Operations about user"
  externalDocs:
    description: "Find out more"
    url: "http://editor.swagger.io/"
schemes:
- "https"
- "http"
paths:
  /login:
    post:
      tags:
      - "Users"
      summary: "To authenticate user"
      description: ""
      operationId: "authentication"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/login"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/response"
        405:
          description: "Invalid input"
  /register:
    post:
      tags:
      - "Users"
      summary: "To Register the new user"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "file"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      - name: "firstname"
        in: "formData"
        description: "firstname"
        required: true
        type: "string"
      - name: "lastname"
        in: "formData"
        description: "lastname"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "email"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password"
        required: true
        type: "string"
      - name: "mobile"
        in: "formData"
        description: "mobile"
        required: true
        type: "string"
      - name: "userType"
        in: "formData"
        description: "Type of user"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
  /api/update-user/{email}:
    patch:
      tags:
      - "Users"
      summary: "To update existing user"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "email"
        in: "path"
        description: "email of the user to update"
        required: true
        type: "string"
      - name: "file"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      - name: "firstname"
        in: "formData"
        description: "firstname"
        required: true
        type: "string"
      - name: "lastname"
        in: "formData"
        description: "lastname"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "email"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password"
        required: true
        type: "string"
      - name: "mobile"
        in: "formData"
        description: "mobile"
        required: true
        type: "string"
      - name: "userType"
        in: "formData"
        description: "Type of user"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
  /api/get-user/{id}:
    get:
      tags:
      - "Users"
      summary: "Get user by id"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /api/send-mail/{email}:
    get:
      tags:
      - "Users"
      summary: "Get user by email and send a recovery mail"
      description: ""
      operationId: "sentmail"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "The id that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid email supplied"
        404:
          description: "User not found"
  /api/forget-password/{email}:
    post:
      tags:
      - "Users"
      summary: "Get user by email and update password"
      description: ""
      operationId: "forgetPassword"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "The id that needs to be fetched. "
        required: true
        type: "string"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/forget"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid email supplied"
        404:
          description: "User not found"
definitions:
  registration:
    type: "object"
    required:
    - "file"
    - "firstname"
    - "lastname"
    - "email"
    - "password"
    - "imageLink"
    - "mobile"
    - "userType"
    properties:
      file:
        type: "string"
        example: "image1.txt"
      firstname:
        type: "string"
        example: "test"
      lastname:
        type: "string"
        example: "test"
      email:
        type: "string"
        example: "testpm@trustbrix.com"
      password:
        type: "string"
        example: "test@123"
      imageLink:
        type: "string"
        example: "src/images/24242342.jpeg"
      mobile:
        type: "number"
        example: "9080878672"
      userType:
        type: "string"
        example: "admin"
    xml:
      name: "Order"
  forget:
    type: "object"
    required:
    - "password"
    properties:
      password:
        type: "string"
        example: "test@123"
  login:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        example: "testpm@trustbrix.com"
      password:
        type: "string"
        example: "test@123"
  response:
    type: "object"
    properties:
      success: 
        type: "boolean"
        example: "true"
      status:
        type: "number"
        example: "200"
      message: 
        type: "string"
        example: "Successfully retrived"
      data: 
        type: "object"
        properties:
          token: 
            type: "string"
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAZ21haWwuY29tIiwiaWF0IjoxNTU1MTIxNDQ0LCJleHAiOjE1NTUxMjUwNDR9.CHMlvUq_-OFC1ItOiZgPwmlotL62cZ9-AHIS7WaF1cs"
          user: 
            type: "object"
            properties:
              tosAccepted:
                type: "boolean"
                example: "true"
              emailVerified:
                type: "boolean"
                example: "true"
              _id: 
                type: "string"
                example: "5cae3ffd6967601f00ff498b"
              firstname:
                type: "string"
                example: "test"
              lastname:
                type: "string"
                example: "test"
              email:
                type: "string"
                example: "testpm@trustbrix.com"
              password:
                type: "string"
                example: "$2b$10$vtuIbWnhd0518eqrFXHmy.07XRtek9aWSra/P5U4Hnk98GimT0LnK"
              imageLink: 
                type: "string"
                example: "src/images/picture1.jpeg"
              mobile:
                type: "number"
                example: "9080878672"
              userType: 
                type: "string"
                example: "admin"
securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: access-token
security:
  - UserSecurity: []                
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"