swagger: "2.0"
info:
  description: "Trustbrix - real estate for everyone"
  version: "1.0.0"
  title: "Trustbrix"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "developers@trustbrix.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:4500"
tags:
- name: "Users"
  description: "Operations about user"
  externalDocs:
    description: "Find out more"
    url: "http://editor.swagger.io/"
- name: "Payment"
  description: "Operations about user"
  externalDocs:
    description: "Find out more"
    url: "http://editor.swagger.io/"
- name: "Home Page"
  description: "Home page components and data"
- name: "Property"
  description: "Operations about property"
schemes:
- "https"
- "http"
paths:
  /login:
    post:
      tags:
      - "Users"
      summary: "To authenticate user"
      description: ""
      operationId: "authentication"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/login"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/response"
        405:
          description: "Invalid input"
  /register:
    post:
      tags:
      - "Users"
      summary: "To Register the new user"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "file"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      - name: "firstname"
        in: "formData"
        description: "firstname"
        required: true
        type: "string"
      - name: "lastname"
        in: "formData"
        description: "lastname"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "email"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password"
        required: true
        type: "string"
      - name: "mobile"
        in: "formData"
        description: "mobile"
        required: true
        type: "string"
      - name: "userType"
        in: "formData"
        description: "Type of user"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
  /api/update-user/{email}:
    patch:
      tags:
      - "Users"
      summary: "To update existing user"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "email"
        in: "path"
        description: "email of the user to update"
        required: true
        type: "string"
      - name: "file"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      - name: "firstname"
        in: "formData"
        description: "firstname"
        required: true
        type: "string"
      - name: "lastname"
        in: "formData"
        description: "lastname"
        required: true
        type: "string"
      - name: "email"
        in: "formData"
        description: "email"
        required: true
        type: "string"
      - name: "password"
        in: "formData"
        description: "password"
        required: true
        type: "string"
      - name: "mobile"
        in: "formData"
        description: "mobile"
        required: true
        type: "string"
      - name: "userType"
        in: "formData"
        description: "Type of user"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
  /api/get-user/{id}:
    get:
      tags:
      - "Users"
      summary: "Get user by id"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /api/send-mail/{email}:
    get:
      tags:
      - "Users"
      summary: "Get user by email and send a recovery mail"
      description: ""
      operationId: "sentmail"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "The id that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid email supplied"
        404:
          description: "User not found"
  /api/forget-password/{email}:
    post:
      tags:
      - "Users"
      summary: "Get user by email and update password"
      description: ""
      operationId: "forgetPassword"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "The id that needs to be fetched. "
        required: true
        type: "string"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/forget"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid email supplied"
        404:
          description: "User not found"
  /api/home-components:
    post:
      tags:
      - "Home Page"
      summary: "To create a home page components"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "bannerImgLink"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      - name: "secondBannerImgLink"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      - name: "blockchainBannerImg"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      - name: "bannerText"
        in: "formData"
        description: "Banner text"
        required: true
        type: "string"
      - name: "bannerTitle"
        in: "formData"
        description: "Banner title"
        required: true
        type: "string"
      - name: "bannerDescription"
        in: "formData"
        description: "Banner description"
        required: true
        type: "string"
      - name: "objectText"
        in: "formData"
        description: "Object Text"
        required: true
        type: "string"
      - name: "propertyName"
        in: "formData"
        description: "Property name"
        required: true
        type: "string"
      - name: "city"
        in: "formData"
        description: "city"
        required: true
        type: "string"
      - name: "Efficiency"
        in: "formData"
        description: "Efficiency"
        required: true
        type: "string"
      - name: "Participants"
        in: "formData"
        description: "Participants"
        required: true
        type: "string"
      - name: "Completed"
        in: "formData"
        description: "Completed"
        required: true
        type: "string"
      - name: "amount"
        in: "formData"
        description: "amount"
        required: true
        type: "string"
      - name: "secondBannerText"
        in: "formData"
        description: "secondBannerText"
        required: true
        type: "string"
      - name: "secondBannerTitle1"
        in: "formData"
        description: "secondBannerTitle1"
        required: true
        type: "string"
      - name: "secondBannerTitle2"
        in: "formData"
        description: "secondBannerTitle2"
        required: true
        type: "string"
      - name: "secondBannerTitle3"
        in: "formData"
        description: "secondBannerTitle3"
        required: true
        type: "string"
      - name: "secondBannerTitle4"
        in: "formData"
        description: "city"
        required: true
        type: "string"
      - name: "secondBannerDes1"
        in: "formData"
        description: "secondBannerDes1"
        required: true
        type: "string"
      - name: "secondBannerDes2"
        in: "formData"
        description: "secondBannerDes2"
        required: true
        type: "string"
      - name: "secondBannerDes3"
        in: "formData"
        description: "secondBannerDes3"
        required: true
        type: "string"
      - name: "secondBannerDes4"
        in: "formData"
        description: "secondBannerDes4"
        required: true
        type: "string"
      - name: "blockchainBanner"
        in: "formData"
        description: "blockchainBanner"
        required: true
        type: "string"
      - name: "blockchainBannerTitle1"
        in: "formData"
        description: "blockchainBannerTitle1"
        required: true
        type: "string"
      - name: "blockchainBannerTitle2"
        in: "formData"
        description: "blockchainBannerTitle2"
        required: true
        type: "string"
      - name: "blockchainBannerTitle3"
        in: "formData"
        description: "blockchainBannerTitle3"
        required: true
        type: "string"
      - name: "blockchainBannerTitle4"
        in: "formData"
        description: "blockchainBannerTitle4"
        required: true
        type: "string"
      - name: "blockchainBannerDes1"
        in: "formData"
        description: "blockchainBannerDes1"
        required: true
        type: "string"
      - name: "blockchainBannerDes2"
        in: "formData"
        description: "blockchainBannerDes2"
        required: true
        type: "string"
      - name: "blockchainBannerDes3"
        in: "formData"
        description: "blockchainBannerDes3"
        required: true
        type: "string"
      - name: "blockchainBannerDes4"
        in: "formData"
        description: "blockchainBannerDes4"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
    get:
      tags:
      - "Home Page"
      summary: "Get details of home page"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /api/partners:
    post:
      tags:
      - "Home Page"
      summary: "To create a partners"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "partnerTitle"
        in: "formData"
        description: "Partner title"
        required: true
        type: "string"
      - name: "file"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      - name: "title"
        in: "formData"
        description: "Title"
        required: true
        type: "string"
      - name: "description"
        in: "formData"
        description: "Description"
        required: true
        type: "string"
      - name: "domainUrl"
        in: "formData"
        description: "Url of the partner domain"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
    get:
      tags:
      - "Home Page"
      summary: "Get details of home page"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /api/property:
    post:
      tags:
      - "Property"
      summary: "To Register the new property"
      description: ""
      consumes:
      - "multipart/form-data"
      produces:
      - "multipart/form-data"
      parameters:
      - name: "images"
        in: "formData"
        description: "To upload a property images"
        required: true
        type: "file"
      - name: "propertyName"
        in: "formData"
        description: "Name of the property"
        required: true
        type: "string"
      - name: "description"
        in: "formData"
        description: "Description of the property"
        required: true
        type: "string"
      - name: "owner"
        in: "formData"
        description: "Owner of the property"
        required: true
        type: "string"
      - name: "propertyType"
        in: "formData"
        description: "Type of the property"
        required: true
        type: "string"
      - name: "address"
        in: "formData"
        description: "Address of the property"
        required: true
        type: "string"
      - name: "city"
        in: "formData"
        description: "Property in the city"
        required: true
        type: "string"
      - name: "surface"
        in: "formData"
        description: "Surface of the property"
        required: true
        type: "number"
      - name: "plot"
        in: "formData"
        description: "Plot details"
        required: true
        type: "number"
      - name: "yearConstruction"
        in: "formData"
        description: "Construction year"
        required: true
        type: "number"
      - name: "rooms"
        in: "formData"
        description: "Rooms in the property"
        required: true
        type: "number"
      - name: "bathrooms"
        in: "formData"
        description: "Bathrooms in the property"
        required: true
        type: "number"
      - name: "floors"
        in: "formData"
        description: "Floors in the property"
        required: true
        type: "number"
      - name: "coordinates"
        in: "formData"
        description: "coordinates in the property"
        required: true
        type: "array"
        items:
          type: "number"
      responses:
        405:
          description: "Invalid input"
  /api/property/{id}:
    get:
      tags:
      - "Property"
      summary: "Get details of propety by id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid id supplied"
        404:
          description: "User not found"
definitions:
  forget:
    type: "object"
    required:
    - "password"
    properties:
      password:
        type: "string"
        example: "test@123"
  login:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        example: "testpm@trustbrix.com"
      password:
        type: "string"
        example: "test@123"
  response:
    type: "object"
    properties:
      success: 
        type: "boolean"
        example: "true"
      status:
        type: "number"
        example: "200"
      message: 
        type: "string"
        example: "Successfully retrived"
      data: 
        type: "object"
        properties:
          token: 
            type: "string"
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RAZ21haWwuY29tIiwiaWF0IjoxNTU1MTIxNDQ0LCJleHAiOjE1NTUxMjUwNDR9.CHMlvUq_-OFC1ItOiZgPwmlotL62cZ9-AHIS7WaF1cs"
          user: 
            type: "object"
            properties:
              tosAccepted:
                type: "boolean"
                example: "true"
              emailVerified:
                type: "boolean"
                example: "true"
              _id: 
                type: "string"
                example: "5cae3ffd6967601f00ff498b"
              firstname:
                type: "string"
                example: "test"
              lastname:
                type: "string"
                example: "test"
              email:
                type: "string"
                example: "testpm@trustbrix.com"
              password:
                type: "string"
                example: "$2b$10$vtuIbWnhd0518eqrFXHmy.07XRtek9aWSra/P5U4Hnk98GimT0LnK"
              imageLink: 
                type: "string"
                example: "src/images/picture1.jpeg"
              mobile:
                type: "number"
                example: "9080878672"
              userType: 
                type: "string"
                example: "admin"
securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: access-token
security:
  - UserSecurity: []                
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"